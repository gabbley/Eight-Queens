Pseudocode for Eight Queens
Gabby Baniqued

ChessSquarePanel

Methods:
	 Constructor, parameters Color and boolean flag
	 addQueens, recursive with one parameter (boolean matrix, true represents a queen)
	 isLegal, helper method, determines if queen is placed in valid position
	 hasEight, helper method, parameter boolean matrix, determines if matrix contains eight queens (regardless of placement)
	 
	ChessSquarePanel(Color c, boolean flag){
	
	}
	
	boolean addQueens(boolean[][] queens){
	//base case
	if (hasEight())
		return true;
	else
		try/catch statement
		try {
		add new queen boolean (true) to lower right of matrix
		if (addQueens(queens))
			display solution by looping through matrix and using paintComponent
			to display a Q or Queen image on the true elements
		}
		catch{
		return false;
		}
	
	}
	
	boolean hasEight(){
		int n = 0;
		for (int i = 0; i < queens.length; i++) {
			for (int j = 0; j < queens[i].length; j++) {
				if (queens[i][j])
					n++;
			}
		}
		return (n == 8);
	}
	
	boolean isLegal(int row, int col, boolean[][] queens){
		//use for loops to check if the queen's placement is valid

		starting from the given coordinates
			loop horizontally, if any elements are true, return false
			loop vertically, if any elements are true, return false
			loop diagonally, if any elements are true, return false
			
			
	}
	
	
	
	process
		create an empty grid (ChessBoard.java)
		create a boolean array to rep the queens, set all as false, fillArr()
		addQueens(), base case, while !hasEightQueens()
			check if it has 8 queens, it'll start with an empty list
			add a queen to the first element, display on the board
			check if legal
			then add queen to next element, keep moving until it is legal (base case, while !isLegal())
		when hasEightQueens(), return true and then it is a complete eight queens
			
	